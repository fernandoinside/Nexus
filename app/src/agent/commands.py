# src/agent/commands.py
import math
import re
import random
from typing import Dict, List, Optional
from src.logger.log_manager import LogManager
from src.agent.agent import Agent
from src.agent.commands_hardware import MultimediaControl

# Configura√ß√µes do sistema
MIN_CONFIDENCE = 0.80  # 80% de confian√ßa m√≠nima

log_manager = LogManager()

# Respostas pr√©-definidas para diferentes cen√°rios
RESPONSES: Dict[str, List[str]] = {
    "low_confidence": [
        "Hmm, a confian√ßa est√° em {confidence}%... Quer que eu busque fontes alternativas?",
        "N√£o estou totalmente seguro com {confidence}%. Devo verificar novamente?",
        "Os resultados s√£o um pouco incertos ({confidence}%). Precisa de mais detalhes?",
    ],
    "no_results": [
        "Desculpe, n√£o encontrei nada sobre '{query}'",
        "Parece que '{query}' n√£o est√° em meu conhecimento atual",
        "Preciso de mais contexto para ajudar com '{query}'",
    ],
    "system_error": [
        "Ops! Algo deu errado. Tente novamente em breve",
        "Encontrei um problema t√©cnico. Meus engenheiros j√° est√£o verificando",
        "Erro inesperado! Por favor, repita sua solicita√ß√£o",
    ],
}


def handle_information_query(
    command: str, agent: Agent, tipo: str, listen_for_command, speak
) -> str:

    # 1. Processamento inicial da query
    """Processa e classifica a consulta do usu√°rio."""
    log_manager.log(f"Processando comando: {command}", level="info")
    # Normalizar a entrada para compara√ß√£o
    query = command.lower()

    # Verificar se a opera√ß√£o j√° foi realizada e armazenada no cache
    cached_result = agent.cache.get(query)
    if cached_result:
        log_manager.log(f"Resultado recuperado do cache: {cached_result}")
        return f"O resultado (do cache) √© {cached_result}"

    log_manager.log(f"Comando normalizado: {query}", level="debug")

    commando_executato = ""

    # Verificar se o comando cont√©m qualquer uma das palavras-chave relacionadas a multim√≠dia
    if any(keyword in query for keyword in ["m√∫sica", "m√∫sica", "m√∫sica", "volume", "mudo"]):
        multimedia_control = MultimediaControl()
        multimedia_control.start_listener()
        if any(keyword in command for keyword in ["pr√≥xima m√∫sica", "m√∫sica seguinte"]):
            multimedia_control.next_music()
            commando_executato = "Pr√≥xima m√∫sica"
        elif any(keyword in command for keyword in ["m√∫sica anterior", "m√∫sica passada"]):
            multimedia_control.previous_music()
            commando_executato = "M√∫sica anterior"
        elif any(keyword in command for keyword in ["aumentar volume", "subir volume"]):
            multimedia_control.volume_up()
            commando_executato = "Volume aumentado"
        elif any(keyword in command for keyword in ["diminuir volume", "baixar volume"]):
            multimedia_control.volume_down()
            commando_executato = "Volume diminu√≠do"
        elif any(keyword in command for keyword in ["mute", "mudo"]):
            multimedia_control.mute()
            commando_executato = "Mudo ativado"

        return commando_executato


    # Caso contr√°rio, realiza o c√°lculo    
    if any(op in query for op in ["soma", "subtra√ß√£o", "multiplica√ß√£o", "divis√£o", "pot√™ncia", "m√≥dulo", "raiz", "m√©dia"]):
        result = processar_calculo(query)  # Chama a fun√ß√£o de c√°lculo
        if isinstance(result, str):  # Se for uma string, significa que houve um erro
            return result
        return f"O resultado √© {result}"      

    # Verificar se a consulta √© uma chat
    if any(keyword in query for keyword in ["chat"]):
        if query.startswith("chat"):                                
            query = query.replace("chat", "").strip()        
        chatbot_response = agent.chatbot.chat(query)    
        return chatbot_response

    # Identificar palavras-chave para busca
    if any(keyword in query for keyword in ["busca", "pesquisa", "encontrar"]):

        if query.startswith("busque:"):        
            query = query.replace("busque:", "").strip()        
        elif query.startswith("pesquise por:"):        
            query = query.replace("pesquise por:", "").strip()        
        elif query.startswith("pesquise:"):        
            query = query.replace("pesquise:", "").strip()

        # Chamar a fun√ß√£o de busca no banco de conhecimento
        response = search_neo4j(command, agent, tipo, listen_for_command, speak, query)
        log_manager.log(f"Busca no Neo4j - Pergunta: {query} -> Resposta: {response}")
        return response
            
    # Caso n√£o seja reconhecido
    response = "Desculpe, n√£o entendi a sua pergunta. Vou perguntar ao meu criador."
    chatbot_response = agent.chatbot.chat(query)
    log_manager.log(f"Chatbot - Pergunta: {query} -> Resposta: {chatbot_response}")
    return chatbot_response
    
    return response


def is_math_command(query: str) -> bool:
    """Verifica se a query cont√©m uma express√£o matem√°tica simples"""
    math_pattern = r"(\d+(\+|\-|\*|\/)\d+)"
    return bool(re.match(math_pattern, query))


def perform_calculation(query: str) -> float:
    """Executa uma opera√ß√£o matem√°tica simples"""
    try:
        # Substitui as palavras para opera√ß√µes matem√°ticas e executa o c√°lculo
        query = (
            query.replace("soma", "+")
            .replace("menos", "-")
            .replace("vezes", "*")
            .replace("dividido", "/")
        )
        result = eval(query)  # Avalia a express√£o matem√°tica
        return result
    except Exception as e:
        return f"Erro ao calcular: {e}"


def search_neo4j(command, agent: Agent, tipo: str, listen_for_command, speak, query):
    """Processa a consulta no banco de dados Neo4j e retorna a melhor resposta encontrada"""

    query = _clean_query(query)  # Limpa a query para remo√ß√£o de palavras-chave

    # 2. Busca no banco de conhecimento
    results = _perform_search(agent, query)

    # 3. Verifica√ß√£o se h√° resultados v√°lidos
    if not results or "similaridade" not in results[0]:
        return random.choice(RESPONSES["no_results"]).format(query=command)

    # 4. Valida√ß√£o dos resultados
    best_result = results[0]
    confidence = best_result["similaridade"]

    # 5. Resposta conforme confian√ßa
    if confidence < MIN_CONFIDENCE:
        log_manager.log(
            random.choice(RESPONSES["low_confidence"]).format(
                confidence=round(confidence * 100)
            )
        )
        return learn_new_info(agent, query, tipo, listen_for_command, speak)

    # 6. Resposta final formatada
    formatted = format_response(results)
    return f"{formatted} (Confian√ßa: {confidence * 100:.0f}%)"


def learn_new_info(agent: Agent, query: str, tipo: str, listen_for_command, speak):
    if tipo == "voz":
        speak(
            f"N√£o encontrei uma resposta confi√°vel para '{query}'. Quer me ensinar? Diga 'sim' ou 'n√£o'."
        )
        user_input = listen_for_command()  # Ouve a resposta do usu√°rio

        if user_input and "sim" in user_input.lower():
            speak(f"√ìtimo! Por favor, diga a resposta para '{query}'.")
            new_answer = listen_for_command()  # Captura a resposta correta do usu√°rio

            if new_answer:
                # Remover a chave de cache correspondente √† query
                # O n√∫mero 1 aqui representa o top_n, que √© 1 pela configura√ß√£o do comando
                cache_key = f"query:{query}:1"
                # Remover do cache diretamente
                agent.cache.client.delete(cache_key)

                # Ensinar a nova informa√ß√£o
                agent.add_new_knowledge(query, new_answer)
                speak("‚úÖ Aprendi essa nova informa√ß√£o! Obrigado! üôå")
            else:
                speak("Desculpe, n√£o consegui entender a resposta. Tente novamente.")
        else:
            speak("Ok, n√£o vou adicionar nada por enquanto.")
    else:  # Caso seja entrada de texto
        user_input = (
            input(
                f"N√£o encontrei uma resposta confi√°vel para '{query}'. Quer me ensinar? (s/n): "
            )
            .strip()
            .lower()
        )
        if user_input == "s":
            new_answer = input(f"Digite a resposta para '{query}': ").strip()

            # Remover a chave de cache correspondente √† query
            # O n√∫mero 1 aqui representa o top_n, que √© 1 pela configura√ß√£o do comando
            cache_key = f"query:{query}:1"
            # Remover do cache diretamente
            agent.cache.client.delete(cache_key)

            # Ensinar a nova informa√ß√£o
            agent.add_new_knowledge(query, new_answer)
            log_manager.log("‚úÖ Aprendi essa nova informa√ß√£o! Obrigado! üôå")
        else:
            log_manager.log("Ok, n√£o vou adicionar nada por enquanto.")


def _clean_query(command: str) -> str:
    """Remove palavras-chave e normaliza a query"""
    keywords = ["o que √©", "quem √©", "defina"]
    query = command.lower()
    for keyword in keywords:
        if keyword in query:
            return query.replace(keyword, "", 1).strip()
    return command  # Retorna o comando original se nenhuma keyword for encontrada


def _perform_search(agent: Agent, query: str) -> Optional[List[Dict]]:
    """Executa busca no banco de dados e trata erros"""
    try:
        return agent.query_information(query)
    except Exception as e:
        log_manager.log(f"Erro na busca: {str(e)}")
        return None


def format_response(results: List[Dict]) -> str:
    """Formata a resposta baseada nos resultados encontrados"""
    if len(results) > 1:
        return (
            f"Encontrei {len(results)} resultados relevantes. "
            f"O principal √©: {results[0]['texto']}. "
            "Gostaria de ouvir outros resultados?"
        )
    return f"Aqui est√° a melhor resposta: {results[0]['texto']}"

def processar_calculo(query):
    if any(op in query for op in ["soma", "subtra√ß√£o", "multiplica√ß√£o", "divis√£o", "pot√™ncia", "m√≥dulo", "raiz", "m√©dia"]):
        if is_math_command(query):
            numbers = [int(num) for num in re.findall(r"\d+", query)]
            if len(numbers) < 2 and "m√©dia" not in query and "raiz" not in query:
                return "Desculpe, preciso de pelo menos dois n√∫meros para realizar a opera√ß√£o."
            result = calcular(query, numbers)
            if isinstance(result, str):  # Caso o resultado seja uma mensagem de erro
                return result
            return f"O resultado √© {result}"

def calcular(query, numbers):
    if any(op in query.lower() for op in ["soma", "somar", "quanto √©"]):
        if len(numbers) == 2:
            result = numbers[0] + numbers[1]
        else:
            result = sum(numbers)

    elif "subtra√ß√£o" in query.lower():
        if len(numbers) == 2:
            result = numbers[0] - numbers[1]
        else:
            return "Desculpe, a subtra√ß√£o precisa de exatamente dois n√∫meros."

    elif "multiplica√ß√£o" in query.lower():
        if len(numbers) == 2:
            result = numbers[0] * numbers[1]
        else:
            return "Desculpe, a multiplica√ß√£o precisa de exatamente dois n√∫meros."

    elif "divis√£o" in query.lower():
        if len(numbers) == 2:
            if numbers[1] != 0:
                result = numbers[0] / numbers[1]
            else:
                return "Desculpe, n√£o posso dividir por zero."
        else:
            return "Desculpe, a divis√£o precisa de exatamente dois n√∫meros."

    elif "pot√™ncia" in query.lower():
        if len(numbers) == 2:
            result = numbers[0] ** numbers[1]
        else:
            return "Desculpe, a pot√™ncia precisa de exatamente dois n√∫meros."

    elif "m√≥dulo" in query.lower():
        if len(numbers) == 2:
            result = numbers[0] % numbers[1]
        else:
            return "Desculpe, o m√≥dulo precisa de exatamente dois n√∫meros."

    elif "raiz quadrada" in query.lower():
        if len(numbers) == 1:
            if numbers[0] >= 0:
                result = math.sqrt(numbers[0])
            else:
                return "Desculpe, n√£o posso calcular a raiz quadrada de um n√∫mero negativo."
        else:
            return "Desculpe, a raiz quadrada precisa de um √∫nico n√∫mero."

    elif "m√©dia" in query.lower():
        if len(numbers) >= 2:
            result = sum(numbers) / len(numbers)
        else:
            return "Desculpe, para calcular a m√©dia preciso de pelo menos dois n√∫meros."

    else:
        return "Desculpe, n√£o entendi a opera√ß√£o."

    return result